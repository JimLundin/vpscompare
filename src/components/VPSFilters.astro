---
import { z } from 'astro:content';

interface Props {
	providers: string[];
}

const { providers } = Astro.props;

// Validate props at runtime
const ProvidersSchema = z.array(z.string().min(1, 'Provider name cannot be empty'));
const validatedProviders = ProvidersSchema.parse(providers);
---

<div class="filters-container">
	<div class="filters-header">
		<h3>Filter VPS Plans</h3>
		<button id="reset-filters" class="reset-button">Reset All</button>
	</div>
	
	<div class="filters-grid">
		<div class="filter-group">
			<label for="provider-filter">Provider:</label>
			<select id="provider-filter" class="filter-select">
				<option value="">All Providers</option>
				{validatedProviders.map(provider => (
					<option value={provider}>{provider}</option>
				))}
			</select>
		</div>

		<div class="filter-group">
			<label for="price-filter">Max Price (USD):</label>
			<input type="range" id="price-filter" class="filter-range" min="0" max="20" step="1" value="20">
			<span id="price-display" class="range-display">$20</span>
		</div>

		<div class="filter-group">
			<label for="ram-filter">Min RAM:</label>
			<select id="ram-filter" class="filter-select">
				<option value="">Any</option>
				<option value="1">1 GB+</option>
				<option value="2">2 GB+</option>
				<option value="4">4 GB+</option>
				<option value="8">8 GB+</option>
			</select>
		</div>

		<div class="filter-group">
			<label for="sort-filter">Sort by:</label>
			<select id="sort-filter" class="filter-select">
				<option value="price-asc">Price: Low to High</option>
				<option value="price-desc">Price: High to Low</option>
				<option value="provider">Provider A-Z</option>
				<option value="ram-desc">RAM: High to Low</option>
			</select>
		</div>
	</div>
</div>

<style>
	.filters-container {
		background: white;
		border-radius: 12px;
		padding: 1.5rem;
		margin-bottom: 2rem;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		border: 1px solid #e5e7eb;
	}

	.filters-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1.5rem;
	}

	.filters-header h3 {
		margin: 0;
		color: #1f2937;
		font-size: 18px;
		font-weight: 600;
	}

	.reset-button {
		background: #f3f4f6;
		border: 1px solid #d1d5db;
		color: #374151;
		padding: 0.5rem 1rem;
		border-radius: 6px;
		font-size: 14px;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.reset-button:hover {
		background: #e5e7eb;
		border-color: #9ca3af;
	}

	.filters-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1.5rem;
	}

	.filter-group {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.filter-group label {
		font-weight: 500;
		color: #374151;
		font-size: 14px;
	}

	.filter-select {
		padding: 0.75rem;
		border: 1px solid #d1d5db;
		border-radius: 6px;
		background: white;
		font-size: 14px;
		color: #374151;
		transition: border-color 0.2s ease;
	}

	.filter-select:focus {
		outline: none;
		border-color: #3b82f6;
		box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
	}

	.filter-range {
		width: 100%;
		height: 6px;
		border-radius: 3px;
		background: #e5e7eb;
		outline: none;
		-webkit-appearance: none;
	}

	.filter-range::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: #3b82f6;
		cursor: pointer;
		border: 2px solid white;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.filter-range::-moz-range-thumb {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: #3b82f6;
		cursor: pointer;
		border: 2px solid white;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.range-display {
		font-weight: 600;
		color: #3b82f6;
		font-size: 14px;
		text-align: center;
	}

	@media (max-width: 768px) {
		.filters-container {
			padding: 1rem;
			margin-bottom: 1.5rem;
		}

		.filters-header {
			flex-direction: column;
			gap: 1rem;
			align-items: stretch;
		}

		.filters-grid {
			grid-template-columns: 1fr;
			gap: 1rem;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const providerFilter = document.getElementById('provider-filter') as HTMLSelectElement;
		const priceFilter = document.getElementById('price-filter') as HTMLInputElement;
		const priceDisplay = document.getElementById('price-display') as HTMLSpanElement;
		const ramFilter = document.getElementById('ram-filter') as HTMLSelectElement;
		const sortFilter = document.getElementById('sort-filter') as HTMLSelectElement;
		const resetButton = document.getElementById('reset-filters') as HTMLButtonElement;
		const tableRows = document.querySelectorAll('.vps-table tbody tr');

		function updatePriceDisplay() {
			priceDisplay.textContent = `$${priceFilter.value}`;
		}

		function filterAndSort() {
			const providerValue = providerFilter.value.toLowerCase();
			const maxPrice = parseFloat(priceFilter.value);
			const minRam = ramFilter.value ? parseInt(ramFilter.value) : 0;
			const sortValue = sortFilter.value;

			const visibleRows: HTMLTableRowElement[] = [];

			tableRows.forEach((row) => {
				const tableRow = row as HTMLTableRowElement;
				const provider = tableRow.cells[0].textContent?.toLowerCase() || '';
				const priceText = tableRow.cells[2].querySelector('.price')?.textContent || '';
				const price = parseFloat(priceText.replace(/[$€]/g, ''));
				const ramText = tableRow.cells[4].textContent || '';
				const ram = parseInt(ramText.replace(/[^\d]/g, ''));

				const matchesProvider = !providerValue || provider.includes(providerValue);
				const matchesPrice = price <= maxPrice;
				const matchesRam = ram >= minRam;

				if (matchesProvider && matchesPrice && matchesRam) {
					tableRow.style.display = '';
					visibleRows.push(tableRow);
				} else {
					tableRow.style.display = 'none';
				}
			});

			sortRows(visibleRows, sortValue);
		}

		function sortRows(rows: HTMLTableRowElement[], sortBy: string) {
			const tbody = document.querySelector('.vps-table tbody');
			if (!tbody) return;

			rows.sort((a, b) => {
				switch (sortBy) {
					case 'price-asc':
						const priceA = parseFloat(a.cells[2].querySelector('.price')?.textContent?.replace(/[$€]/g, '') || '0');
						const priceB = parseFloat(b.cells[2].querySelector('.price')?.textContent?.replace(/[$€]/g, '') || '0');
						return priceA - priceB;
					case 'price-desc':
						const priceA2 = parseFloat(a.cells[2].querySelector('.price')?.textContent?.replace(/[$€]/g, '') || '0');
						const priceB2 = parseFloat(b.cells[2].querySelector('.price')?.textContent?.replace(/[$€]/g, '') || '0');
						return priceB2 - priceA2;
					case 'provider':
						const providerA = a.cells[0].textContent || '';
						const providerB = b.cells[0].textContent || '';
						return providerA.localeCompare(providerB);
					case 'ram-desc':
						const ramA = parseInt(a.cells[4].textContent?.replace(/[^\d]/g, '') || '0');
						const ramB = parseInt(b.cells[4].textContent?.replace(/[^\d]/g, '') || '0');
						return ramB - ramA;
					default:
						return 0;
				}
			});

			rows.forEach(row => tbody.appendChild(row));
		}

		function resetFilters() {
			providerFilter.value = '';
			priceFilter.value = '20';
			ramFilter.value = '';
			sortFilter.value = 'price-asc';
			updatePriceDisplay();
			filterAndSort();
		}

		priceFilter.addEventListener('input', () => {
			updatePriceDisplay();
			filterAndSort();
		});

		providerFilter.addEventListener('change', filterAndSort);
		ramFilter.addEventListener('change', filterAndSort);
		sortFilter.addEventListener('change', filterAndSort);
		resetButton.addEventListener('click', resetFilters);

		updatePriceDisplay();
		filterAndSort();
	});
</script>